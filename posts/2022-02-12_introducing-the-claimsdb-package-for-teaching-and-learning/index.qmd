---
title: "Introducing the claimsdb package for teaching and learning"
date: "2022-02-12"
categories: [health care, claims, Medicare, databases]
image: "README-diagram.PNG"
execute: 
  warning: false
  output: true
---

![](README-diagram.PNG){style="border: 5px solid #555;" fig-alt="Diagram of claims database tables with arrows to show data relationships"}

In the fields of health informatics and health services research, health insurance claims data are a valuable resource to help answer questions about health care access and financing. However, claims data in the real world often contains both sensitive (protected health information) and proprietary (trade secrets) elements. For most students and educators seeking opportunities to learn how to use claims data, there are few available sources for practice.

To help with this problem, [**claimsdb**](https://github.com/jfangmeier/claimsdb) ðŸ“¦ provides easy access to a sample of health insurance enrollment and claims data from the [Centers for Medicare and Medicaid Services (CMS) Data Entrepreneurs' Synthetic Public Use File (DE-SynPUF)](https://www.cms.gov/Research-Statistics-Data-and-Systems/Downloadable-Public-Use-Files/SynPUFs/DE_Syn_PUF), as a set of relational tables or as an in-memory database using [DuckDB](https://duckdb.org/). All the data is contained within a single package, so users do not need to download any external data. This package is inspired by and based on the [starwarsdb](https://github.com/gadenbuie/starwarsdb) package.

The data are structured as actual Medicare claims data but are fully "synthetic," after a process of alterations meant to reduce the risk of re-identification of real Medicare beneficiaries. The synthetic process that CMS adopted changes the co-variation across variables, so analysts should be cautious about drawing inferences about the actual Medicare population.

The data included in claimsdb comes from 500 randomly selected 2008 Medicare beneficiaries from Sample 2 of the DE-SynPUF, and it includes all the associated claims for these members for 2008-2009. CMS provides [resources](https://www.cms.gov/Research-Statistics-Data-and-Systems/Downloadable-Public-Use-Files/SynPUFs/DESample02), including a codebook, FAQs, and other documents with more information about this data.

To introduce claimsdb, this post covers the following topics: - Installation of the claimsdb package - How to setup a remote database with the included data - Examples of how to use claimsdb for analysis - An overview of the limitations of the data included in package

## Installation and components of the *claimsdb* package

You can install the development version of claimsdb from GitHub with:

```{r install claimsdb, eval=FALSE}
# install.packages("devtools")
devtools::install_github("jfangmeier/claimsdb")
```

You can then load claimsdb alongside your other packages. We will be using the *tidyverse* packages in our later examples.

```{r}
library(tidyverse)
library(claimsdb)
```

The tables are available after loading the claimsdb package. This includes a `schema` that describes each of the tables and the included variables from the [CMS DE-SynPUF](https://www.cms.gov/Research-Statistics-Data-and-Systems/Downloadable-Public-Use-Files/SynPUFs/DE_Syn_PUF). You can see that claimsdb includes five tables. One of the tables, *bene* contains beneficiary records, while the others include specific types of claims data.

```{r}
schema
```

You can access details on the variables in each of the tables like in this example with the *inpatient* table. You can see that this table contains 35 fields, including a beneficiary code to identify members across tables as well as detailed information on each inpatient claim.

```{r}
schema %>% 
  filter(TABLE == "inpatient") %>% 
  pull(PROPERTIES)
```

## Access claims data as a remote database

Many organizations store claims data in a remote database, so claimsdb also includes all of the tables as an in-memory DuckDB database. This can be a great way to practice working with this type of data, including building queries with dplyr code using dbplyr.

To setup the in-memory database, you need to create a database connection using `claims_connect()` and create connections to each of the tables you want to use.

```{r}
library(dbplyr)

# Setup connection to duckDB database
con <- claims_connect()

# Setup connections to each of the enrollment and claims tables in the database
bene_rmt <- tbl(con, "bene")
inpatient_rmt <- tbl(con, "inpatient")
outpatient_rmt <- tbl(con, "outpatient")
carrier_rmt <- tbl(con, "carrier")
pde_rmt <- tbl(con, "pde")
```

You can then preview your connection to each of the remote tables.

```{r}
# Preview the prescription drug event table in the database
pde_rmt
```

## Examples of using *claimsdb* for analysis

To analyze and explore the claims and beneficiary data, you can execute your own SQL code on the database using the `DBI` package.

```{r}
DBI::dbGetQuery(
  con, 
  paste0(
    'SELECT "DESYNPUF_ID", "BENE_BIRTH_DT"',
    'FROM "bene"',
    'WHERE "BENE_SEX_IDENT_CD" = 1.0',
    'LIMIT 10'
  )
)
```

However, in the following examples, we will use the `dbplyr` package which translates dplyr code into SQL that can be executed against the database. You can see that the results below with dplyr functions match the results above that used a SQL query.

```{r}
bene_rmt %>% 
  filter(BENE_SEX_IDENT_CD == 1) %>% 
  select(DESYNPUF_ID, BENE_BIRTH_DT)
```

We can use the `show_query()` function to see the SQL code that dbplyr created and that it closely matches the SQL code above.

```{r}
bene_rmt %>% 
  filter(BENE_SEX_IDENT_CD == 1) %>% 
  select(DESYNPUF_ID, BENE_BIRTH_DT) %>% 
  show_query()
```

### First, a note about working with dates/times in databases

dbplyr is an amazing tool for working with databases, especially if you want to use many functions from the dplyr and tidyr packages. However, it does not currently have SQL translations for all functions in the tidyverse family of packages. For example, the `lubridate` package's date and time functions work on local dataframes but cannot be translated to work on remote tables at this time. In the example below, you can see that the lubridate function `year()` (for parsing the year from a date) works on the local dataframe but generates an error on the remote table with the same data.

```{r, error=TRUE}
bene %>% 
  transmute(
    DESYNPUF_ID,
    BENE_BIRTH_DT,
    BIRTH_YEAR = lubridate::year(BENE_BIRTH_DT)
  )

bene_rmt %>% 
  transmute(
    DESYNPUF_ID,
    BENE_BIRTH_DT,
    BIRTH_YEAR = lubridate::year(BENE_BIRTH_DT)
  )
```

Fortunately, dbplyr allows you pass along SQL functions in your dplyr code, and it will include these functions in the generated query. For date/time functions, we need to consult the [documentation](https://duckdb.org/docs/sql/functions/date) from DuckDB on date functions. To parse a part of a date (e.g., the year), we need to use the `date_part()` function for DuckDB.

The function to do this task may vary across database backends, so if you are doing this with a different database (Oracle, SQL Server, etc.), you will need to read the documentation for that database management system.

```{r}
bene_rmt %>% 
  transmute(
    DESYNPUF_ID,
    BENE_BIRTH_DT,
    BIRTH_YEAR = date_part('year', BENE_BIRTH_DT)
  )
```

### Example 1: *which members had the highest prescription drug costs for 2008?*

For this first example, we are going to identify the beneficiaries with the highest total prescription drug costs in 2008. We need to use the *pde* table that has claims on prescription drug events and the *bene* table that has beneficiary records. We create an object that is the aggregated costs for prescription drugs at the beneficiary level in 2008. Note that we had to use `date_part()` to parse the year from the service date.

```{r}
# Calculate rx costs for utilizing members in 2008
rx_costs_rmt <- pde_rmt %>% 
  mutate(BENE_YEAR = date_part('year', SRVC_DT)) %>% 
  filter(BENE_YEAR == 2008) %>% 
  group_by(BENE_YEAR, DESYNPUF_ID) %>% 
  summarize(TOTAL_RX_COST = sum(TOT_RX_CST_AMT, na.rm = T), .groups = "drop") %>% 
  ungroup()

rx_costs_rmt
```

Then we join the aggregated cost data to the beneficiary table. This is necessary because the *pde* table does not include beneficiaries who didn't use any prescription drugs. After joining the table we reassign missing cost data to zero for those beneficiaries with no utilization. We can then use `collect()` to retrieve the results as a local dataframe.

```{r}
# Join the rx costs data to the beneficiary file and include members with no costs
rx_bene_rmt <- bene_rmt %>% 
  filter(BENE_YEAR == 2008) %>% 
  select(
    BENE_YEAR,
    DESYNPUF_ID
  ) %>% 
  left_join(
    rx_costs_rmt, by = c("BENE_YEAR", "DESYNPUF_ID")
  ) %>% 
  mutate(TOTAL_RX_COST = ifelse(is.na(TOTAL_RX_COST), 0, TOTAL_RX_COST)) %>% 
  arrange(desc(TOTAL_RX_COST))

rx_bene_rmt

# You can use collect() to bring the results into a local dataframe
rx_bene_df <- rx_bene_rmt %>% 
  collect()

rx_bene_df
```

### Example 2: *what percent of beneficiaries received an office visit within 30 days of discharge from a hospital?*

In the next example, we are identifying which beneficiaries had an office visit within 30 days of being discharged. We will start with the *inpatient* table that contains records for all inpatient stays, including when a beneficiary was discharged. We create an object that includes the beneficiary ID, the discharge date, and the date 30 days after discharge. Note that for DuckDB we need to coerce "30" to an integer to calculate the new date.

```{r}
# Identify all member discharge dates and the dates 30 days after discharge from the inpatient table
ip_discharges <- inpatient_rmt %>% 
  transmute(
    DESYNPUF_ID, 
    DSCHRG_DT = NCH_BENE_DSCHRG_DT,
    DSCHRG_DT_30 = NCH_BENE_DSCHRG_DT + as.integer(30)) %>% 
  distinct()

ip_discharges
```

Next, we need to identify office visits from the *carrier* table. I created a vector of five office visit codes for this example. Since these codes must match the values in the "HCPCS" columns, we reshape the table with `pivot_longer()` then filter for the office visit codes.

```{r}
# Create vector of office visit codes
off_vis_cds <- as.character(99211:99215)

# Identify members who had an office visit from the carrier table
off_visit <- carrier_rmt %>% 
  select(DESYNPUF_ID, CLM_ID, CLM_FROM_DT, matches("HCPCS")) %>% 
  pivot_longer(cols = matches("HCPCS"), names_to = "LINE", values_to = "HCPCS") %>% 
  filter(HCPCS %in% off_vis_cds) %>% 
  distinct(DESYNPUF_ID, CLM_FROM_DT) %>% 
  mutate(OFFICE_VISIT = 1)

off_visit
```

Finally, we join the office visits object to the discharges object. We can use the `sql_on` option in `left_join()` to inject some custom SQL to join when the office visit date is within 30 days of the discharge date.

```{r}
# Join discharges data and office visit data
discharge_offvis <- 
  ip_discharges %>% 
  left_join(
    off_visit,
    sql_on = paste0(
      "(LHS.DESYNPUF_ID = RHS.DESYNPUF_ID) AND",
      "(RHS.CLM_FROM_DT >= LHS.DSCHRG_DT) AND",
      "(RHS.CLM_FROM_DT <= LHS.DSCHRG_DT_30)"
      )
  )

discharge_offvis
```

After the join is complete, we can calculate the share of discharges with a timely office visit.

```{r}
# Find the percent of members with a office visit within 30 days of discharge
discharge_offvis %>% 
  distinct(
    DESYNPUF_ID.x,
    DSCHRG_DT,
    OFFICE_VISIT
  ) %>% 
  mutate(OFFICE_VISIT = ifelse(is.na(OFFICE_VISIT), 0, OFFICE_VISIT)) %>% 
  summarize(
    OFV_RATE = mean(OFFICE_VISIT, na.rm = T)
  )
```

### Example 3: *how well are beneficiaries filling their hypertension drug prescriptions?*

For this final example, we need to identify hypertension medications from the *pde* table and calculate medication adherence rates for each beneficiary. To isolate the hypertension medications, we can borrow from the HEDIS medication list for ACE inhibitors and ARB medications (which are commonly used to treat hypertension). This medication list is for 2018/2019, so it likely includes new drugs that did not exist in 2008/2009 and may not include older drugs that are no longer used (ideally it's best to use external lists that match the time frame of the claims data).

```{r}
hedis_wb <- tempfile()

download.file(
  url = "https://www.ncqa.org/hedis-2019-ndc-mld-directory-complete-workbook-final-11-1-2018-3/",
  destfile = hedis_wb,
  mode = "wb"
)

hedis_df <- readxl::read_excel(
  path = hedis_wb,
  sheet = "Medications List to NDC Codes"
)

hyp_ndc_df <- 
  hedis_df %>% 
  filter(`Medication List` == "ACE Inhibitor/ARB Medications") %>% 
  select(
    LIST = `Medication List`,
    PRODUCTID = `NDC Code`
  )

hyp_ndc_df
```

One of the cool features of dbplyr is that we can copy this local dataframe to the database as a temporary table using the `copy_to()` function.

```{r}
hyp_ndc_rmt <- copy_to(con, hyp_ndc_df, overwrite = T)

hyp_ndc_rmt
```

With the hypertension codes in the database, we can use `inner_join()` to find the matching drugs from the *pde* table.

```{r}
pde_hyp_rmt <- 
  pde_rmt %>% 
  inner_join(
    hyp_ndc_rmt, by = c("PROD_SRVC_ID" = "PRODUCTID")
  )

pde_hyp_rmt
```

We can now use `collect()` to retrieve the data as a local dataframe. As a dataframe, we can now use the `AdhereR` package to calculate the *medication possession ratio (MPR)* for members who filled a hypertension medication. MPR is a commonly used metric of medication adherence, measuring if beneficiaries have gaps between their prescription fills.

We can see the MPR for each member who filled one of the medications, and we can calculate the median and mean MPRs across these beneficiaries.

```{r}
# install.packages("AdhereR")
library(AdhereR)

pde_hyp_df <- pde_hyp_rmt %>% 
  collect()

hyp_adhere <- CMA4(
  data = pde_hyp_df,
  ID.colname = 'DESYNPUF_ID',
  event.date.colname = 'SRVC_DT',
  event.duration.colname = 'DAYS_SUPLY_NUM',
  date.format = "%Y-%m-%d"
)

hyp_adhere_cma <- hyp_adhere$CMA %>% tibble()

hyp_adhere_cma

hyp_adhere_cma %>% 
  summarize(
    median_mpr = median(CMA),
    mean_mpr = mean(CMA)
  )
```

## Data Limitations

While data included in claimsdb is useful for many types of analyses, it does include a few notable limitations. - As mentioned earlier, the data is a small sample (500 beneficiaries) and is not intended to be representative of the Medicare population. In addition, the data is synthetic and should not be used for drawing inferences on the Medicare population. - Since the data is more than 10 years old, it doesn't capture newer medications or procedures. It also includes procedure codes that have been retired or replaced. This is a challenge when applying external code lists that are much newer. - The diagnosis fields in the data use the International Classification of Diseases, Ninth Revision (ICD-9), but the United States converted to ICD-10 in 2015. If you are interesting in a mapping between ICD-9 and ICD-10, CMS has [resources](https://www.cms.gov/Medicare/Coding/ICD10/Archive-ICD-10-CM-ICD-10-PCS-GEMs) to consider. - The Medicare population is mostly Americans aged 65 and over, so the data will not have claims on certain specialties such as pediatrics or maternity care.
